@model JourneyPortal.ViewModels.Trip.MapViewModel
<script type='text/javascript' src='http://www.bing.com/api/maps/mapcontrol?callback=GetMap&branch=experimental&key=[ApWjTuEb1r0S7SgcQ4yG_QUvpOWTPwSdFm3ZrJge121zlIGx9Ep8gl_fln9VX_GT]' async defer></script>
<link href="~/Content/Map/SnackBar.css" rel="stylesheet" />
<link href="~/Content/Map/AtractionGrid.css" rel="stylesheet" />
<style>
    .Flexible-container {
        position: relative;
        padding-bottom: 56.25%;
        padding-top: 30px;
        height: 0;
        overflow: hidden;
    }

        .Flexible-container iframe,
        .Flexible-container object,
        .Flexible-container embed {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
</style>
<div class="container contentBody">
    <div class="jumbotron-">
        <h1>Własna wycieczka</h1>
        <p>
            Witaj w sekcji <b>"Własna wycieczka"</b>
        </p>
    </div>
    <p>W tym miejscu możesz sam zaplanowac swoją wymarzoną wycieczkę.</p>
    <p>Wystarczy że wybierzesz bazę wypadową oraz uzupełnisz inne niezbędne kryteria.</p>

    <div class="panel panel-success">
        <div class="panel-heading">Hotel : <span id="currentHotel"></span></div>
        <div class="panel-body">
            Wybrane atrakcje :
            <div id="currentAtractions" style="overflow:auto;height:200px">
                <ul id="myUL"></ul>
            </div>
        </div>
    </div>
        <div class="Flexible-container" id="myMap">
            <iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0"></iframe>
        </div>
        <div id="snackbar"></div>
    </div>

    <div id="saveTripModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Zapisz wycieczkę</h4>
                </div>
                <div class="modal-body">
                    <p>Nazwa</p>
                    <input id="tripName" type="text" class="form-control" />
                    <button onclick="saveTripInBase();">Zapisz wycieczkę</button>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Zamknij</button>
                </div>
            </div>
        </div>
    </div>

    <div id="addPinModal" class="modal fade" role="dialog">
        <div class="modal-dialog">

            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Dodaj obiek turystyczny</h4>
                </div>
                <div class="modal-body">
                    @using (Ajax.BeginForm("AddObjectFromMap", "Trip", new AjaxOptions() { HttpMethod = "POST" , OnSuccess = "showCOnfirmSnackbar" }))
                    {
                        <div class="container-fluid">
                            <div class=" row">

                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <input name="xCoords" value="" id="xCoords" type="text" />
                                </div>
                                <div class="col-lg-6">
                                    <input name="yCoords" value="" id="yCoords" type="text" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <label class="radioContainer">
                                        Atrakcja
                                        <input id="radioAtraction" type="radio" checked="checked" value="atraction" name="radio">
                                        <span class="checkmark"></span>
                                    </label>
                                </div>
                                <div class="col-lg-6">
                                    <label class="radioContainer">
                                        Hotel
                                        <input id="radioHotel" type="radio" value="hotel" name="radio">
                                        <span class="checkmark"></span>
                                    </label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <input name="name" type="text" placeholder="Nazwa" style="border-radius: 25px;border: 2px solid #1556ca;"/>
                                </div>
                                <div class="col-lg-6">
                                    <button class="btn btn-primary" type="submit">Dodaj obiekt turystyczny</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Zamknij</button>
                </div>
            </div>

        </div>
    </div>


    <div id="objectDetailModal" class="modal fade" role="dialog">
        <div class="modal-dialog">

            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Szczegóły obiektu turystycznego</h4>
                </div>
                <div class="modal-body">
                        <div class="container-fluid">
                            <div class="row">
                                <div class="col-lg-6">
                                    <label id="objectDetailXCoords"></label>
                                </div>
                                <div class="col-lg-6">
                                    <label id="objectDetailYCoords"></label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <label id="objectDetailName"></label>
                                </div>
                                <div class="col-lg-3">
                                    <label id="objectDetailCost"></label>
                                </div>    
                                <div class="col-lg-3">
                                    <label id="objectDetailRate"></label>
                                </div>
                            </div>
                        </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Zamknij</button>
                </div>
            </div>

        </div>
    </div>

    <br />
    <script type='text/javascript'>

        var map;
        var selectedAtractions = [];
        var selectedHotel;
        var tripDetail = {
            travelDistance : 0,
            travelDuration : 0,
            travelDurationTraffic:0,
        }
        var visability = {
            atraction: true,
            path: true,
        }
        var routes = [];

        function drawSavedRoute(data) {
            for (var i = 0; i < data.length; i++) {
                var startLoc = {
                    latitude: data[i].Start.latitude,
                    longitude: data[i].Start.longitude,
                }
                var endLoc = {
                    latitude: data[i].End.latitude,
                    longitude: data[i].End.longitude,
                }
                var coords = [startLoc, endLoc];

                var line = new Microsoft.Maps.Polyline(coords, {
                    strokeColor: 'red',
                    strokeThickness: 3,
                    strokeDashArray: [4, 4]
                });

                var path = {
                    Start: startLoc,
                    End: endLoc,
                };
                map.entities.push(line);
                routes.push(path);
            }
        }

        function drawRoute(data) {
            for (var i = 0; i < data.length - 1; i++) {
                var startLoc = {
                    latitude: data[i][0],
                    longitude: data[i][1],
                }
                var endLoc = {
                    latitude: data[i + 1][0],
                    longitude: data[i + 1][1],
                }
                var coords = [startLoc, endLoc];

                var line = new Microsoft.Maps.Polyline(coords, {
                    strokeColor: 'red',
                    strokeThickness: 3,
                    strokeDashArray: [4, 4]
                });
                map.entities.push(line);
                var path = {
                    Start: startLoc,
                    End: endLoc,
                };
                routes.push(path);
            }

        }


        function createTrip() {
            var request = '&wp.0=' + selectedHotel.x + ',' + selectedHotel.y;
            for (var i = 0; i < selectedAtractions.length; i++) {
                request += '&wp.' + parseInt(i + 1) + '=' + selectedAtractions[i].x + ',' + selectedAtractions[i].y;
            }
            $.get("http://dev.virtualearth.net/REST/V1/Routes/Driving?" + request + "&optwp=true&optmz=distance&routeAttributes=routePath&key=ApWjTuEb1r0S7SgcQ4yG_QUvpOWTPwSdFm3ZrJge121zlIGx9Ep8gl_fln9VX_GT", function (data) {
                drawRoute(data.resourceSets[0].resources[0].routePath.line.coordinates);
                tripDetail.travelDistance = data.resourceSets[0].resources[0].travelDistance;
                tripDetail.travelDuration = data.resourceSets[0].resources[0].travelDuration;
                tripDetail.travelDurationTraffic = data.resourceSets[0].resources[0].travelDurationTraffic;
            });

            $("#saveTripBtn").prop("disabled", false);
            $("#createTripBtn").prop("disabled", true);
            DisableAtractions();

        }

        //function getYourTrip() {
        //    var url = '/Trip/GetYourTrip';
        //    $.get(url, function (data) {
        //        $("body").html(data);
        //    });
        //}

        function saveTripInBase() {

            var url = '/Trip/SaveTrip';
            var atractions = JSON.stringify(selectedAtractions);
            var hotel = JSON.stringify(selectedHotel);
            var nameTrip = $('#tripName').val();
            var route = JSON.stringify(routes);
            $.post(url, { route: route, travelDistance: tripDetail.travelDistance, travelDuration: tripDetail.travelDuration, travelDurationTraffic: tripDetail.travelDurationTraffic, name: nameTrip, hotel: hotel, atractions: atractions }, function (data) {
                $('#saveTripModal').modal('hide');
            });
        }

        function restartTrip() {
            selectedAtractions = [];
            selectedHotel = null;
            $("#myUL").empty();
            $("#currentHotel").empty();
            $("#saveTripBtn").prop("disabled", true);
            $("#createTripBtn").prop("disabled", true);
            $("#visabilityPinBtn").text("Ukryj pinezki");
            $("#visabilityRoadBtn").text("Ukryj drogę");
            visability.atraction = true;
            visability.path = true;
            clearMap();
            getPins();


        }

        function showHideHotels() {
            for (var i = map.entities.getLength() - 1; i >= 0; i--) {
                var pushpin = map.entities.get(i);

                if (pushpin instanceof Microsoft.Maps.Pushpin && !pushpin.isAtraction && pushpin.entity.id != selectedHotel.id) {
                    if (visability.hotels) {

                        pushpin.setOptions({ visible: false });
                    }
                    else {
                        pushpin.setOptions({ visible: true });
                    }
                }
            }
        }
        function showHidePins(btn) {
            for (var i = map.entities.getLength() - 1; i >= 0; i--) {
                var pushpin = map.entities.get(i);

                if (pushpin instanceof Microsoft.Maps.Pushpin) {
                    if (visability.atraction) {

                        pushpin.setOptions({ visible: false });
                    }
                    else {
                        pushpin.setOptions({ visible: true });
                    }
                }
            }
            visability.atraction = !visability.atraction;
            if (visability.atraction) {
                btn.textContent = "Ukryj pinezki";
            } else {
                btn.textContent = "Pokaż pinezki";
            }
        }
        function showHideRoad(btn) {
            for (var i = map.entities.getLength() - 1; i >= 0; i--) {
                var path = map.entities.get(i);

                if (path instanceof Microsoft.Maps.Polyline) {
                    if (visability.path) {

                        path.setOptions({ visible: false });
                    }
                    else {
                        path.setOptions({ visible: true });
                    }
                }
            }
            visability.path = !visability.path;
            if (visability.path) {
                btn.textContent = "Ukryj drogę";
            } else {
                btn.textContent = "Pokaż drogę";
            }
        }
        function removeAtraction() {
            $("#currentHotel").text('');
            for (var i = map.entities.getLength() - 1; i >= 0; i--) {
                var pushpin = map.entities.get(i);

                if (pushpin instanceof Microsoft.Maps.Pushpin && pushpin.isAtraction) {
                    map.entities.removeAt(i);
                }
            }
        }
        function hideOtherHotels(currentHotel) {
            for (var i = map.entities.getLength() - 1; i >= 0; i--) {
                var pushpin = map.entities.get(i);

                if (pushpin instanceof Microsoft.Maps.Pushpin && !pushpin.isAtraction && pushpin.entity.id != currentHotel) {
                    map.entities.removeAt(i);
                }
            }

        }
        function showCOnfirmSnackbar(e) {
            if (e.success == true) {
                $('#addPinModal').modal('hide');
                var x = document.getElementById("snackbar");
                x.className = "show";
                x.textContent = e.text;
                setTimeout(function () { x.className = x.className.replace("show", ""); }, 5000);
                var location = {
                    latitude: e.x,
                    longitude: e.y,
                }
                var pinIcon;
                if (e.isHotel == true) {
                    pinIcon = '/Content/Map/gray-pin.svg';
                }
                else {
                    pinIcon = '/Content/Map/black-pin.svg';
                }
                var pin = CreatePin(location, pinIcon, e.name);
                map.entities.push(pin);
            }

        }
        function showSnackBar(e) {
            var text = e.target._options.title;
            var x = e.target.geometry.y;
            var y = e.target.geometry.x;
            $("#currentHotel").append('<span class="tab">' + text + ' ( ' + x + ' / ' + y + ' ) ' + '</span>');
            selectedHotel = {
                idDb: e.target.IdDb,
                id: e.target.entity.id,
                name: text,
                x: x,
                y: y,
            };
            var x = document.getElementById("snackbar");
            x.className = "show";
            x.textContent = text;
            setTimeout(function () { x.className = x.className.replace("show", ""); }, 5000);
        }

        function addButtonsToMap() {
            PanningOverlay.prototype = new Microsoft.Maps.CustomOverlay({ beneathLabels: false });

            function PanningOverlay() {
                this.createTripBtn = document.createElement('button');
                this.createTripBtn.textContent = 'Stwórz wycieczkę';
                this.createTripBtn.className = 'btn btn-primary';
                this.createTripBtn.style.margin = '5px';
                this.createTripBtn.disabled = true;
                this.createTripBtn.id = "createTripBtn";
                this.createTripBtn.onclick = function () {
                    createTrip();
                };
                this.showHidePinsBtn= document.createElement('button');
                this.showHidePinsBtn.textContent = 'Ukryj pinezki';
                this.showHidePinsBtn.className = 'btn btn-primary';
                this.showHidePinsBtn.style.margin = '5px';
                this.showHidePinsBtn.id = "visabilityPinBtn";
                this.showHidePinsBtn.onclick = function () {
                    showHidePins(this);
                };
                this.showHideRoadBtn = document.createElement('button');
                this.showHideRoadBtn.textContent = 'Ukryj drogę';
                this.showHideRoadBtn.className = 'btn btn-primary';
                this.showHideRoadBtn.style.margin = '5px';
                this.showHideRoadBtn.id = "visabilityRoadBtn";
                this.showHideRoadBtn.onclick = function () {
                    showHideRoad(this);
                };
                this.restartBtn = document.createElement('button');
                this.restartBtn.textContent = 'Zacznij od nowa';
                this.restartBtn.className = 'btn btn-primary';
                this.restartBtn.style.margin = '5px';
                this.restartBtn.onclick = function () {
                    restartTrip();
                };
                //this.yourTripsBtn = document.createElement('button');
                //this.yourTripsBtn.textContent = 'Twoje wycieczki';
                //this.yourTripsBtn.className = 'btn btn-primary';
                //this.yourTripsBtn.style.margin = '5px';
                //this.yourTripsBtn.onclick = function () {
                //    getYourTrip();
                //};
                this.saveTripBtn = document.createElement('button');
                this.saveTripBtn.textContent = 'Zapisz wycieczkę';
                this.saveTripBtn.className = 'btn btn-primary';
                this.saveTripBtn.style.margin = '5px';
                this.saveTripBtn.disabled = true;
                this.saveTripBtn.id = "saveTripBtn";
                this.saveTripBtn.onclick = function () {
                    $('#saveTripModal').modal('show');
                };

            }
            PanningOverlay.prototype.onAdd = function () {
                var container = document.createElement('div');
                container.appendChild(this.createTripBtn);
                container.appendChild(this.saveTripBtn);
                //container.appendChild(this.yourTripsBtn);
                container.appendChild(this.showHidePinsBtn);
                container.appendChild(this.showHideRoadBtn);
                container.appendChild(this.restartBtn);
                container.style.position = 'absolute';
                container.style.top = '10px';
                container.style.left = '10px';
                container.className = 'container';

                this.setHtmlElement(container);
            };
            var overlay = new PanningOverlay();
            map.layers.insert(overlay);
        }

        function clearMap() {
            for (var i = map.entities.getLength() - 1; i >= 0; i--) {
                var pushpin = map.entities.get(i);
                map.entities.removeAt(i);
            }
        }

        function addMapEvents() {

            @if (Model.IsProprietor)
            {
                <text>
                Microsoft.Maps.Events.addHandler(map, 'rightclick', function (e) {
                    $('#xCoords').val(e.location.latitude);
                    $('#yCoords').val(e.location.longitude);
                    $('#addPinModal').modal('show');
                });
                </text>
                }
                else
                {

                }

        }

        function CreatePin(location,icon,title) {
            var pin = new Microsoft.Maps.Pushpin(location, {
                title: title,
                icon: icon,
                anchor: new Microsoft.Maps.Point(10, 10),
            });
            return pin;
        }

        function SeeObjectDetail(pin, clickType) {
            Microsoft.Maps.Events.addHandler(pin, clickType, function (e) {
                $('#objectDetailXCoords').text(e.target.geometry.y);
                $('#objectDetailYCoords').text(e.target.geometry.x);
                $('#objectDetailName').text(e.target.entity.title);
                $('#objectDetailCost').text(e.target.Cost);
                $('#objectDetailModal').modal('show');
            });
        }
        function AddDataIntoUL(atractionsList, hotel) {
            for (var i = 0; i < atractionsList.length; i++) {
                newElementFromSaved(atractionsList[i], false);
            }
            $("#currentHotel").append('<span class="tab">' + hotel.Name + ' ( ' + hotel.X + ' / ' + hotel.Y + ' ) ' + '</span>')
        }
        function GetMap() {
            map = new Microsoft.Maps.Map('#myMap', {
                credentials: 'ApWjTuEb1r0S7SgcQ4yG_QUvpOWTPwSdFm3ZrJge121zlIGx9Ep8gl_fln9VX_GT',
                center: new Microsoft.Maps.Location(53.272425, 21.012989),
                mapTypeId: Microsoft.Maps.MapTypeId.road,
                zoom: 3,
                minZoom: 3,
            });

            addButtonsToMap();
            addMapEvents();
            clearMap();

            @if (!Model.DrawMap)//empty map
            {
                <text>
                getPins();
                </text>
            }
            else//draw created trip
            {
                <text>
                    var hotel = @Html.Raw(Json.Encode(Model.Hotel));
                    var location = {
                        latitude: hotel.X,
                        longitude: hotel.Y,
                    }
                    var pinIcon;
                    if (hotel.IsActive) {
                        pinIcon = '/Content/Map/yellow-pin.svg';
                    }
                    else {
                        pinIcon = '/Content/Map/gray-pin.svg';
                    }

            var pin = CreatePin(location, pinIcon, hotel.Name);
                    map.entities.push(pin);
                    pin.isAtraction = false;
                    pin.isActive = hotel.IsActive;
                    pin.Cost = hotel.Cost;
                    SeeObjectDetail(pin, 'click');
                    var atractionList = @Html.Raw(Json.Encode(Model.Atractions));
                    for (var i = 0; i < atractionList.length; i++) {
                        var location = {
                            latitude: atractionList[i].X,
                            longitude: atractionList[i].Y,
                        }
                        pinIcon = '/Content/Map/green-pin.svg';
                        var pushPin = CreatePin(location, pinIcon, atractionList[i].Name);
                        map.entities.push(pushPin);
                        pushPin.isAtraction = true;
                        pushPin.isActive = atractionList[i].IsActive;
                        pushPin.Cost = atractionList[i].Cost;
                        SeeObjectDetail(pushPin, 'click');
                    }
                    var routesList = @Html.Raw(Json.Encode(Model.Routes));
                    drawSavedRoute(routesList);
                    AddDataIntoUL(atractionList, hotel);

                </text>
            }

        }

        function DisableAtractions() {
            for (var i = map.entities.getLength() - 1; i >= 0; i--) {
                var pushpin = map.entities.get(i);
                if (pushpin instanceof Microsoft.Maps.Pushpin) {
                    Microsoft.Maps.Events.removeHandler(pushpin.handlerId);
                }
            }
            $('.close').remove();
        }

        function getPins() {
            @if (Model.IsProprietor)
            {
                <text>
            $.get("/Trip/GetYourTouristFacilities", function (data) {
                for (var i = 0; i < data.hotels.length; i++) {
                    var location = {
                        latitude: data.hotels[i].X,
                        longitude: data.hotels[i].Y,
                    }
                    var pinIcon;
                    if (data.hotels[i].IsActive) {
                        pinIcon = '/Content/Map/yellow-pin.svg';
                    }
                    else {
                        pinIcon = '/Content/Map/gray-pin.svg';
                    }

                    var pin = CreatePin(location, pinIcon, data.hotels[i].Name)
                    map.entities.push(pin);
                    pin.isAtraction = false;
                    pin.isActive = data.hotels[i].IsActive;
                    pin.Cost = data.hotels[i].Cost;
                    SeeObjectDetail(pin, 'click');

                }
                for (var i = 0; i < data.atractions.length; i++) {
                    var location = {
                        latitude: data.atractions[i].X,
                        longitude: data.atractions[i].Y,
                    }
                    var pinIcon;
                    if (data.atractions[i].IsActive) {
                        pinIcon = '/Content/Map/green-pin.svg';
                    }
                    else {
                        pinIcon = '/Content/Map/black-pin.svg';
                    }
                    var pin = CreatePin(location, pinIcon, data.atractions[i].Name)
                    map.entities.push(pin);
                    pin.isAtraction = true;
                    pin.isActive = data.atractions[i].IsActive;
                    pin.Cost = data.atractions[i].Cost;
                    SeeObjectDetail(pin, 'click');
                }
            });
                </text>
            }
            else
            {
                <text>
            $.get("/Trip/GetAllHotels", function (data) {
                    for (var i = 0; i < data.hotels.length; i++) {
                        var location = {
                            latitude: data.hotels[i].X,
                            longitude: data.hotels[i].Y,
                        }
                        var pin = new Microsoft.Maps.Pushpin(location, {
                            title: data.hotels[i].Name,
                            icon: '/Content/Map/yellow-pin.svg',
                            anchor: new Microsoft.Maps.Point(10, 10),
                        });
                        //hotel click
                        var handlerId = Microsoft.Maps.Events.addHandler(pin, 'click', function (e) {
                            $.get("/Trip/GetNearestAtractions", { x: e.target.geometry.y, y: e.target.geometry.x }, function (data) {
                                removeAtraction();
                                Microsoft.Maps.Events.removeHandler(e.target.handlerId);
                                hideOtherHotels(e.target.entity.id);
                                for (var i = 0; i < data.atraction.length; i++) {
                                    var location = {
                                    latitude: data.atraction[i].X,
                                    longitude: data.atraction[i].Y,
                                }
                                var iconColor = '';
                                var rate = parseInt(data.atraction[i].Rate);
                                if (rate > 4) {
                                    iconColor = '/Content/Map/purple-pin.svg';
                                }
                                else if (rate <= 4 && rate >= 3){
                                    iconColor = '/Content/Map/red-pin.svg';
                                }
                                else {
                                    iconColor = '/Content/Map/blue-pin.svg';
                                }
                                var pushPins = new Microsoft.Maps.Pushpin(location, {
                                    title: data.atraction[i].Name,
                                    icon: iconColor,
                                    anchor: new Microsoft.Maps.Point(10, 10),
                                })
                                    var handlerId = Microsoft.Maps.Events.addHandler(pushPins, 'click', function (f) {
                                        var point = {
                                            idDb : f.target.IdDb,
                                            id: f.target.entity.id,
                                            name: f.target._options.title,
                                            x: f.target.geometry.y,
                                            y: f.target.geometry.x,
                                        }
                                        newElement(point, true)
                                        selectedAtractions.push(point);
                                        $("#createTripBtn").prop("disabled", false);
                                        f.target.setOptions({ icon: "/Content/Map/green-pin.svg" });
                                        Microsoft.Maps.Events.removeHandler(f.target.handlerId);
                                    });
                                    //SeeObjectDetail(pushPins, 'rightclick');
                                    map.entities.push(pushPins);
                                    pushPins.isAtraction = true;
                                    pushPins.handlerId = handlerId;
                                    pushPins.originIconColor = iconColor;
                                    pushPins.IdDb = data.atraction[i].Id;
                                }
                                showSnackBar(e);
                            });
                        });
                        //SeeObjectDetail(pin, 'click');
                        map.entities.push(pin);
                        pin.isAtraction = false;
                        pin.handlerId = handlerId;
                        pin.IdDb = data.hotels[i].Id;
                    }
                });
                </text>
            }
        }
        function newElementFromSaved(point, createCloseButton) {
            var li = document.createElement("li");
            li.id = point.id;
            var inputValue = point.Name + ' ( ' + point.X + ' / ' + point.Y + ' ) ';
            var t = document.createTextNode(inputValue);
            li.appendChild(t);
            document.getElementById("myUL").appendChild(li);
            if (createCloseButton) {
                var button = document.createElement("BUTTON");
                var txt = document.createTextNode("\u00D7");
                button.className = "close";
                button.appendChild(txt);
                button.onclick = function () {
                    removeElement(li.id);
                };
                li.appendChild(button);

                for (i = 0; i < close.length; i++) {
                    close[i].onclick = function () {
                        var div = this.parentElement;
                        div.style.display = "none";
                    }
                }
            }
        }
        function newElement(point,createCloseButton) {
            var li = document.createElement("li");
            li.id = point.id;
            var inputValue = point.name + ' ( ' + point.x + ' / ' + point.y + ' ) ';
            var t = document.createTextNode(inputValue);
            li.appendChild(t);
            document.getElementById("myUL").appendChild(li);
            if (createCloseButton) {
                var button = document.createElement("BUTTON");
                var txt = document.createTextNode("\u00D7");
                button.className = "close";
                button.appendChild(txt);
                button.onclick = function () {
                    removeElement(li.id);
                };
                li.appendChild(button);

                for (i = 0; i < close.length; i++) {
                    close[i].onclick = function () {
                        var div = this.parentElement;
                        div.style.display = "none";
                    }
                }
            }
        }
        function removeElement(id) {
            $('#' + id).remove();
            for (var i = map.entities.getLength() - 1; i >= 0; i--) {
                var pushpin = map.entities.get(i);

                if (pushpin instanceof Microsoft.Maps.Pushpin && pushpin.entity.id == id) {
                    pushpin.setOptions({ icon: pushpin.originIconColor });
                    var handlerId = Microsoft.Maps.Events.addHandler(pushpin, 'click', function (f) {
                        var point = {
                            id: f.target.entity.id,
                            name: f.target._options.title,
                            x: f.target.geometry.y,
                            y: f.target.geometry.x,
                        }
                        //newElement(point)
                        selectedAtractions.push(point);
                        $("#createTripBtn").prop("disabled", false);
                        f.target.setOptions({ icon: "/Content/Map/green-pin.svg" });
                        Microsoft.Maps.Events.removeHandler(f.target.handlerId);
                    });
                    pushpin.handlerId = handlerId;

                }
            }
            for (var i = 0; i < selectedAtractions.length; i++) {
                if (selectedAtractions[i].id == id) {
                    selectedAtractions.splice(i, 1);
                }
            }
            if (selectedAtractions.length == 0) {
                $("#createTripBtn").prop("disabled", true);
            }
        }

    </script>
